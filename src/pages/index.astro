---
import Layout from "../layouts/Layout.astro";
import RecipeCard from "../components/RecipeCard.astro";
import { recipes, getTopTags, getAllAuthors } from "../data/recipes";

const topTags = getTopTags(8);
const allAuthors = getAllAuthors();
---

<Layout
  title="Simple Recipes"
  description="Clean, accessible recipes without the fluff"
>
  <header class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-4">Simple Recipes</h1>
    <p class="text-lg text-gray-600 mb-6">
      Clean, straightforward recipes with clear instructions. No life stories,
      just great cooking.
    </p>

    <div class="filter-section" role="region" aria-labelledby="filter-heading">
      <h2 id="filter-heading" class="text-lg font-semibold text-gray-900 mb-3">
        Filter Recipes
      </h2>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <div>
          <div class="flex items-center justify-between mb-2">
            <h3 class="text-sm font-medium text-gray-700">By Category</h3>
            <a
              href="/tags"
              class="text-xs text-blue-600 hover:text-blue-800 focus:outline-none focus:underline"
            >
              View all tags
            </a>
          </div>
          <div
            class="flex flex-wrap gap-2"
            role="group"
            aria-label="Recipe category filters"
          >
            <button
              type="button"
              class="filter-btn active px-3 py-1.5 rounded-full text-sm font-medium bg-blue-100 text-blue-800 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
              data-filter="all"
              data-filter-type="category"
              aria-pressed="true"
            >
              All Recipes
            </button>
            {
              topTags.map((tag) => (
                <button
                  type="button"
                  class="filter-btn px-3 py-1.5 rounded-full text-sm font-medium bg-gray-100 text-gray-700 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                  data-filter={tag}
                  data-filter-type="category"
                  aria-pressed="false"
                >
                  {tag.charAt(0).toUpperCase() + tag.slice(1)}
                </button>
              ))
            }
          </div>
        </div>

        <div>
          <h3 class="text-sm font-medium text-gray-700 mb-2">By Author</h3>
          <div
            class="flex flex-wrap gap-2"
            role="group"
            aria-label="Recipe author filters"
          >
            <button
              type="button"
              class="author-filter-btn active px-3 py-1.5 rounded-full text-sm font-medium bg-green-100 text-green-800 hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
              data-filter="all"
              data-filter-type="author"
              aria-pressed="true"
            >
              All Authors
            </button>
            {
              allAuthors.map((author) => (
                <button
                  type="button"
                  class="author-filter-btn px-3 py-1.5 rounded-full text-sm font-medium bg-gray-100 text-gray-700 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
                  data-filter={author}
                  data-filter-type="author"
                  aria-pressed="false"
                >
                  {author}
                </button>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </header>

  <section
    class="recipe-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
    role="region"
    aria-labelledby="recipes-heading"
    aria-live="polite"
  >
    <h2 id="recipes-heading" class="sr-only">Recipe List</h2>
    {
      recipes.map((recipe) => (
        <div
          class="recipe-item"
          data-tags={recipe.tags.join(",")}
          data-author={recipe.author}
          data-testid="recipe-card"
        >
          <RecipeCard recipe={recipe} />
        </div>
      ))
    }
  </section>

  <div
    id="no-results"
    class="hidden text-center py-12"
    role="status"
    aria-live="polite"
  >
    <svg
      class="mx-auto h-12 w-12 text-gray-400"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      role="img"
      aria-hidden="true"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.034 0-3.935.606-5.5 1.645M6.343 6.343a8 8 0 1011.314 0M12 2v6m-6 6l6-6 6 6"
      ></path>
    </svg>
    <h3 class="mt-2 text-sm font-medium text-gray-900">No recipes found</h3>
    <p class="mt-1 text-sm text-gray-500">
      Try selecting a different category.
    </p>
  </div>
</Layout>

<script>
  class RecipeFilter {
    private currentCategoryFilter = "all";
    private currentAuthorFilter = "all";
    private categoryButtons: NodeListOf<HTMLButtonElement>;
    private authorButtons: NodeListOf<HTMLButtonElement>;
    private recipeItems: NodeListOf<HTMLElement>;
    private noResultsElement: HTMLElement | null;

    constructor() {
      this.categoryButtons = document.querySelectorAll(".filter-btn");
      this.authorButtons = document.querySelectorAll(".author-filter-btn");
      this.recipeItems = document.querySelectorAll(".recipe-item");
      this.noResultsElement = document.getElementById("no-results");

      this.initializeEventListeners();
    }

    private initializeEventListeners(): void {
      this.categoryButtons.forEach((button) => {
        button.addEventListener("click", (event) => {
          const target = event.target as HTMLButtonElement;
          const filter = target.getAttribute("data-filter") || "all";
          this.setCategoryFilter(filter);
        });
      });

      this.authorButtons.forEach((button) => {
        button.addEventListener("click", (event) => {
          const target = event.target as HTMLButtonElement;
          const filter = target.getAttribute("data-filter") || "all";
          this.setAuthorFilter(filter);
        });
      });
    }

    private setCategoryFilter(filter: string): void {
      if (this.currentCategoryFilter === filter) return;

      this.currentCategoryFilter = filter;
      this.updateButtonStates(this.categoryButtons, filter, "blue");
      this.filterRecipes();
    }

    private setAuthorFilter(filter: string): void {
      if (this.currentAuthorFilter === filter) return;

      this.currentAuthorFilter = filter;
      this.updateButtonStates(this.authorButtons, filter, "green");
      this.filterRecipes();
    }

    private updateButtonStates(
      buttons: NodeListOf<HTMLButtonElement>,
      activeFilter: string,
      color: string
    ): void {
      buttons.forEach((button) => {
        const isActive = button.getAttribute("data-filter") === activeFilter;
        button.classList.toggle("active", isActive);
        button.setAttribute("aria-pressed", isActive.toString());

        if (isActive) {
          button.classList.remove(
            "bg-gray-100",
            "text-gray-700",
            "hover:bg-gray-200"
          );
          button.classList.add(
            `bg-${color}-100`,
            `text-${color}-800`,
            `hover:bg-${color}-200`
          );
        } else {
          button.classList.remove(
            `bg-${color}-100`,
            `text-${color}-800`,
            `hover:bg-${color}-200`
          );
          button.classList.add(
            "bg-gray-100",
            "text-gray-700",
            "hover:bg-gray-200"
          );
        }
      });
    }

    private filterRecipes(): void {
      let visibleCount = 0;

      this.recipeItems.forEach((item) => {
        const tags = item.getAttribute("data-tags") || "";
        const author = item.getAttribute("data-author") || "";

        const categoryMatch =
          this.currentCategoryFilter === "all" ||
          tags.split(",").includes(this.currentCategoryFilter);
        const authorMatch =
          this.currentAuthorFilter === "all" ||
          author === this.currentAuthorFilter;

        const shouldShow = categoryMatch && authorMatch;

        if (shouldShow) {
          item.style.display = "";
          item.setAttribute("aria-hidden", "false");
          visibleCount++;
        } else {
          item.style.display = "none";
          item.setAttribute("aria-hidden", "true");
        }
      });

      // Show/hide no results message
      if (this.noResultsElement) {
        if (visibleCount === 0) {
          this.noResultsElement.classList.remove("hidden");
        } else {
          this.noResultsElement.classList.add("hidden");
        }
      }

      // Announce filter change to screen readers
      let announcement = `Showing ${visibleCount} recipe${visibleCount !== 1 ? "s" : ""}`;
      if (
        this.currentCategoryFilter !== "all" ||
        this.currentAuthorFilter !== "all"
      ) {
        announcement += " filtered by";
        if (this.currentCategoryFilter !== "all") {
          announcement += ` category: ${this.currentCategoryFilter}`;
        }
        if (this.currentAuthorFilter !== "all") {
          if (this.currentCategoryFilter !== "all") announcement += " and";
          announcement += ` author: ${this.currentAuthorFilter}`;
        }
      }
      this.announceToScreenReader(announcement);
    }

    private announceToScreenReader(message: string): void {
      const announcement = document.createElement("div");
      announcement.setAttribute("aria-live", "polite");
      announcement.setAttribute("aria-atomic", "true");
      announcement.className = "sr-only";
      announcement.textContent = message;

      document.body.appendChild(announcement);

      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => new RecipeFilter());
  } else {
    new RecipeFilter();
  }
</script>
