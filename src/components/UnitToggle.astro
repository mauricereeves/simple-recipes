---
// This component provides unit system toggle functionality
---

<div class="unit-toggle-container mb-6">
  <fieldset class="border border-gray-300 rounded-lg p-4">
    <legend class="px-2 text-sm font-medium text-gray-700">Measurement Units</legend>
    
    <div class="grid grid-cols-2 gap-4">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-2">System</label>
        <div class="space-y-2">
          <label class="flex items-center">
            <input
              type="radio"
              name="unit-system"
              value="imperial"
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
              checked
              aria-describedby="imperial-desc"
            />
            <span class="ml-2 text-sm text-gray-700">Imperial</span>
          </label>
          <div id="imperial-desc" class="text-xs text-gray-500 ml-6">
            Cups, ounces, pounds, Fahrenheit
          </div>
          
          <label class="flex items-center">
            <input
              type="radio"
              name="unit-system"
              value="metric"
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
              aria-describedby="metric-desc"
            />
            <span class="ml-2 text-sm text-gray-700">Metric</span>
          </label>
          <div id="metric-desc" class="text-xs text-gray-500 ml-6">
            Milliliters, grams, kilograms, Celsius
          </div>
        </div>
      </div>
      
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-2">Temperature</label>
        <div class="space-y-2">
          <label class="flex items-center">
            <input
              type="radio"
              name="temperature-unit"
              value="fahrenheit"
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
              checked
            />
            <span class="ml-2 text-sm text-gray-700">Fahrenheit (째F)</span>
          </label>
          
          <label class="flex items-center">
            <input
              type="radio"
              name="temperature-unit"
              value="celsius"
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
            />
            <span class="ml-2 text-sm text-gray-700">Celsius (째C)</span>
          </label>
        </div>
      </div>
    </div>
  </fieldset>
</div>

<script>
  import type { UnitSystem, TemperatureUnit } from '../types/Recipe';
  import { convertMeasurement, formatAmount, celsiusToFahrenheit, fahrenheitToCelsius } from '../utils/measurements';

  class UnitToggleManager {
    private unitSystem: UnitSystem = 'imperial';
    private temperatureUnit: TemperatureUnit = 'fahrenheit';

    constructor() {
      this.loadPreferences();
      this.initializeEventListeners();
      this.updateDisplay();
    }

    private loadPreferences(): void {
      const saved = localStorage.getItem('recipe-preferences');
      if (saved) {
        try {
          const prefs = JSON.parse(saved);
          this.unitSystem = prefs.unitSystem || 'imperial';
          this.temperatureUnit = prefs.temperatureUnit || 'fahrenheit';
        } catch (e) {
          console.warn('Failed to load preferences:', e);
        }
      }
    }

    private savePreferences(): void {
      localStorage.setItem('recipe-preferences', JSON.stringify({
        unitSystem: this.unitSystem,
        temperatureUnit: this.temperatureUnit
      }));
    }

    private initializeEventListeners(): void {
      document.addEventListener('change', (event) => {
        const target = event.target as HTMLInputElement;
        
        if (target.name === 'unit-system') {
          this.unitSystem = target.value as UnitSystem;
          this.savePreferences();
          this.updateDisplay();
        } else if (target.name === 'temperature-unit') {
          this.temperatureUnit = target.value as TemperatureUnit;
          this.savePreferences();
          this.updateDisplay();
        }
      });
    }

    private updateDisplay(): void {
      // Update radio button states
      const systemRadios = document.querySelectorAll('input[name="unit-system"]') as NodeListOf<HTMLInputElement>;
      systemRadios.forEach(radio => {
        radio.checked = radio.value === this.unitSystem;
      });

      const tempRadios = document.querySelectorAll('input[name="temperature-unit"]') as NodeListOf<HTMLInputElement>;
      tempRadios.forEach(radio => {
        radio.checked = radio.value === this.temperatureUnit;
      });

      // Update recipe display
      this.updateIngredients();
      this.updateTemperatures();
    }

    private updateIngredients(): void {
      const ingredientElements = document.querySelectorAll('[data-ingredient]');
      
      ingredientElements.forEach(element => {
        const data = JSON.parse(element.getAttribute('data-ingredient') || '{}');
        const original = JSON.parse(element.getAttribute('data-original') || '{}');
        
        if (original.amount && original.unit) {
          const converted = convertMeasurement(original.amount, original.unit, this.unitSystem);
          const formattedAmount = formatAmount(converted.amount);
          
          const amountSpan = element.querySelector('[data-amount]');
          const unitSpan = element.querySelector('[data-unit]');
          
          if (amountSpan) amountSpan.textContent = formattedAmount;
          if (unitSpan) unitSpan.textContent = converted.unit;
        }
      });
    }

    private updateTemperatures(): void {
      const tempElements = document.querySelectorAll('[data-temperature]');
      
      tempElements.forEach(element => {
        const originalTemp = parseInt(element.getAttribute('data-original-temp') || '0');
        const originalUnit = element.getAttribute('data-original-unit') || 'fahrenheit';
        
        let displayTemp = originalTemp;
        let displayUnit = this.temperatureUnit;
        
        if (originalUnit !== this.temperatureUnit) {
          if (originalUnit === 'celsius' && this.temperatureUnit === 'fahrenheit') {
            displayTemp = celsiusToFahrenheit(originalTemp);
          } else if (originalUnit === 'fahrenheit' && this.temperatureUnit === 'celsius') {
            displayTemp = fahrenheitToCelsius(originalTemp);
          }
        }
        
        const symbol = this.temperatureUnit === 'celsius' ? '째C' : '째F';
        element.textContent = `${displayTemp}${symbol}`;
      });
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new UnitToggleManager());
  } else {
    new UnitToggleManager();
  }
</script>